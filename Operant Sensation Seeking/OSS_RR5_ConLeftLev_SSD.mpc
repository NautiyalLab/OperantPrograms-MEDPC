\                        C O M M E N T S
\
\ RR5 Schedule for operant sensation seeking (both levers present, left active)
\
\ Stephanie Desrochers 2/20/19

\only save W variable to data file*******
DISKFORMAT = 13
DISKVARS = W    \"DISKVARS" only prints selected variables to datafile
DISKCOLUMNS = 1

                   \  Inputs ****************************
^headIN = 3       \  IR head entry detector
^LLever2 = 1       \  left lever press
^RLever2 = 2       \  right lever press


                   \  Outputs ****************************
^leftlever = 1
^rightlever = 2
^house = 7         \houselight
^leftlight = 4
^rightlight = 5

^dipper = 3        \ On Liquid Dipper

\  VARIABLES USED IN THIS PROGRAM
\   a = holder for lever press start
\   b = holder for lever press end
\   c = master timer (in seconds, with 1/10s resolution)
\   d = used
\   e = ssd list reinforcer duration
\   f =
\   g = ssd list light on/off time length
\   h =
\   i = ssd list left/right reinforcers
\   j = used now counts trials
\   k = session clock
\   l =
\   m = ssd selected reinforcer duration
\   n = used
\   o =
\   p = used
\   q
\   r = lever press record
\   s =
\   t = master timer
\   u
\   v = ssd selected light on/off time length
\  (w) = time and event code for matlab
\   x =
\   y = ssd selected left/right reinforcer
\   z = ssd timer variable for reinforcer

\======================================================
\ MATLAB standardized codes
\ *** = used in this program

^Feed1 = 0021
^Feed2 = 0022
^Feed3 = 0023
^Feed4 = 0024
^DipOn = 0025   
^DipOff = 0026   
^LLeverOn = 0027 \***
^RLeverOn= 0028  \***
^LLeverOff = 0029 \***
^RLeverOff = 0030 \***
^LightOff1 = 0031
^LightOff2 = 0032
^LightOff3 = 0033
^LightOff4 = 0034
^LightOn1 = 0041
^LightOn2 = 0042
^LightOn3 = 0043
^LightOn4 = 0044
^ToneOff1 = 0051
^ToneOff2 = 0052
^ToneOff3 = 0053
^ToneOff4 = 0054
^ToneOn1 = 0061
^ToneOn2 = 0062
^ToneOn3 = 0063
^ToneOn4 = 0064
^WNoiseOff1 = 0071  
^WNoiseOff2 = 0072
^WNoiseOff3 = 0073
^WNoiseOff4 = 0074
^WNoiseOn1 = 0081  
^WNoiseOn2 = 0082
^WNoiseOn3 = 0083
^WNoiseOn4 = 0084

^StartTrial = 0111  \***
^EndTrial = 0112  \***
^StartSession = 0113  \***
^EndSession = 0114   \***
^HouseLightOff = 0115	\***
^HouseLightOn = 0116   \***

^StartIti = 0121
^EndIti = 0122
^LightOffStan = 0201
^LightOnStan = 0202
^LightOffComp = 0203
^LightOnComp = 0204
^LightOffCtrl = 0205
^LightOnCtrl = 0206
^FeedStan = 0207
^FeedComp = 0208
^StartStanFlash = 0209
^StopStanFlash = 0211
^StartCompFlash = 0212
^StopCompFlash = 0213
^STNonGapNonProbe = 0214
^STNonGapProbe = 0215
^STGapNonProbe = 0216
^STGapProbe = 0217

^ProbeTrial = 0221
^AutoTrial = 0222

^PokeOff1 = 1001
^PokeOff2 = 1002
^PokeOff3 = 1003
^PokeOff4 = 1004
^PokeOn1 = 1011   \***
^PokeOn2 = 1012
^PokeOn3 = 1013
^PokeOn4 = 1014
^LPressOn = 1015   
^RPressOn = 1016   
^LPressOff = 1017   
^RPressOff = 1018   
^PokeOffStan = 1301
^PokeOnStan = 1302
^PokeOffComp = 1303
^PokeOnComp = 1304
^PokeOffCtrl = 1305
^PokeOnCtrl = 1306

^ActivePress = 1401   \***
^InactivePress = 1402   \***

\================================================================


\Dimensionalize Event and Time code array
dim w=10000
dim a=2
dim b=2
dim k=4
dim r=2

\Left reinforcer is 0, right is one list
list i = 0,0,0,0,0,1,1,1,1,1
\Reinforcer Duration, 100th of a second
list e = 200, 400, 600, 800
\light on/off time length 100th of a second
list g = 80, 40, 25, 15
\reinforcer schedule

list f = 1,1,1,1,2
\===============================
\   Z-PULSES USED IN THIS PROGRAM
\ z1 = 
\ z2 = active lever press
\ z3 = end session
\ z4 =
\ z8/9/10 = poking
\===============================

\===============================
\  Show Positions
\ 1 = Session Timer
\ 2 = Left Presses
\ 3 = Right Presses
\ 4 = Reinforcers
\ 5 = HE indicator
\ 6 = RR
\===============================


s.s.1,  \MATLAB TIMER "T"
s1,
        0": SET p = -1; set m = 1--->s2
s2,
        .01": SET T = T + 100000 --->sx \Keeps time in 100th of a second


S.S.2,    \INITIALIZE
s1,
           #start:~initANL926;~;~SetRack (MG, 2);~;
        ~SetAmp (MG,BOX, 63);~;
        ~SetRF (MG,BOX, 10);~;~SetFreq (MG,BOX, 0);~;

         ON^house; add p; set w(p)= ^HouseLightOn + T--->s2

s2,  \end after 60 minutes
    60': Off^rightlever; add p; set w(p)=^RLeverOff+T;
    Off^leftlever; add p; set w(p)=^LLeverOff+T;--->s3
s3,
        10": OFF^house;add p; set w(p) = ^HouseLightOff + T;

            add p; set w(p)= ^EndSession + T;
            add p; set w(p)=-987.987;--->stopabortflush


s.s.3,  \REINFORCER GENERATOR
s1,
        #start:add p; set w(p)= ^StartSession + T;
                ON^Rightlever; add p; set w(p)=^RLeverOn+T;
        ON^leftlever; add p; set w(p)=^LLeverOn+T;--->s2

s2,
        #z2: ON^dipper;SET s=1;
                       add p; set w(p) = ^DipOn + T--->s3


s3,
	5":OFF^dipper;SET s=0; add p; set w(p) = ^DipOff + T;
          add q;SHOW 4, Dipper# ,q; --->s2




S.S.4,  \Head Entry (Input 3) COUNTER

S1,
    #START:SHOW 5,HeadIn,0; set u=0; --->S2

S2,
    #R^headIN:  add p; set w(p)=^PokeOn1+T;add u; SHOW 5,HeadIn,u; z10 ---> s3


s3,
    #z8 ---> s2




s.s.5,  \Head still in checker part 1

s1,
    #z10 --->s2   \Z10 gets called when head first enters


s2,
    0": z9 ---> s3


s3,
    0.05": if x>0 [@headSTILLin, @headExit]
        @headSTILLin: set x=0; ---> s2
        @headEXIT: z8; add p; set w(p)=^PokeOff1+T;---> s1





s.s.6, \Head still in checker part 2

s1,
    #z9: --->s2


s2,
    #R^headIN: set x=1; --->s3
s3, 
   0": --->s1


S.S.7,  \Bar Press Detector - Left Lever
s1,
    #Start: --->s2
s2,
        #R^LLever2: add p; set w(p)= ^ActivePress+T; add r(1); show 2, LeftPress, r(1); --->s3

s3,
	
	.01": randi l=f ;show 6, RR_Sched, l; 
	if l=2[@Reinf,@MoreBP] 
		@Reinf: z2;--->s2 
		@MoreBP:--->s2

S.S.8,  \Bar Press Detector - Right Lever
s1,
    #Start: --->s2
s2,
        #R^RLever2:add p; set w(p)= ^InactivePress+T; add r(0); show 3, RightPress, r(0); --->sx 	

S.S.9, \Session Duration Clock
s1,
    #start:--->s2
s2,
    1":    set k(0)=k(0)+.01; if k(0)>.59 [@AddMin, @NoAdd]
            @AddMin: add k(1); set k(0)=0; set k(2)=k(0)+k(1);
                 show 1, Session, k(2)--->s2
            @NoAdd: set k(2)=k(0)+k(1); show 1, Session, k(2)--->s2
